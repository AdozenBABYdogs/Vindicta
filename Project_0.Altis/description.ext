#include "OOP_light\OOP_Light.h"


author="Sparker, Jeroen, Marvis, Sen, Billw";
OnLoadName = "Project_0";
OnLoadMission = "Project_0";

allowFunctionsRecompile = 1;
allowFunctionsLog = 1;
enableDebugConsole = 2;



// ---- Respawn ----
respawn = 3;
respawnButton = 0; // 0: disabled - 1: enabled. Default: 1
respawnDelay = 2; // Default: ?
// respawnOnStart = 1;
DisabledAI = 1;
respawnTemplates[] = {"MenuPosition"};

/*
class CfgTaskEnhancements
    {
    enable       = 1;            //0: disable new task features (default), 1: enable new task features & add new task markers and task widgets into the map
    3d           = 1;            //0: do not use new 3D markers (default), 1: replace task waypoints with new 3D markers
    3dDrawDist   = 3500;        //3d marker draw distance (default: 2000)
    share        = 1;            //0: do not count assigned players (default), 1: count how many players have the task assigned
    propagate    = 1;            //0: do not propagate (default), 1: propagate shared tasks to subordinates
    };
*/

/*
class Header
{
gameType = COOP;
minplayers=1;
maxplayers=50;
};
*/

class CfgSounds
{
	sounds[] = {};
	#include "CfgSounds.hpp"
};

class CfgIdentities
{

};

class CfgDebriefing
{
	// Used when all players die in MP
	class OOP_ERROR_DEBRIEFING_CLASS_NAME
	{
		title = "OOP: critical error";
		description = "A critical OOP error has happened. See 'OOP error' section.";
	};
};

class CfgDebriefingSections
{
	class OOP_error
	{
		title = "OOP error";
		variable = OOP_ERROR_DEBRIEFING_SECTION_VAR_NAME_STR;
	};
};

class Params {
    //#include "aceSettings.hpp"
};

class CfgFunctions {
	#include "Dialogue\functions.hpp"
	#include "JeroenArsenal\functions.hpp"
    #include "CivilianPresence\functions.hpp"
	class missionTag
	{
		class randomThings
		{
            class preInit {
				preInit = 1;
				file = "preInit.sqf";
			};
		};
	};
};

//==== Dialogs and UIs ====
#include "UI\Resources\UIBase.hpp"
#include "UI\Resources\MissionUIControlClasses.h"
#include "UI\ClientMapUI\ClientMapUI.h"
#include "UI\DialogBase\DialogBase.h"
#include "UI\InGameMenu\InGameMenu.h"


//#include "\A3\ui_f\hpp\defineCommonGrids.inc"
//#include "\A3\ui_f\hpp\defineCommonColors.inc"


//==== Remote execution ====
class CfgRemoteExec
{
    // List of script functions allowed to be sent from client via remoteExec
    class Functions
    {
        // State of remoteExec: 0-turned off, 1-turned on, taking whitelist into account, 2-turned on, however, ignoring whitelists (default because of backward compatibility)
        mode = 2;
        // Ability to send jip messages: 0-disabled, 1-enabled (default)
        jip = 1;
    };

    // List of script commands allowed to be sent from client via remoteExec
    class Commands
    {
        mode = 2;
    };
};

// HUD UIs
class RscTitles {

    class Default 
    {
        idd = -1;
        fadein = 0;
        fadeout = 0;
        duration = 2;
    };

#include "UI\UndercoverUI\UndercoverUI.h"
#include "UI\Resources\UndercoverUIDebug\UndercoverUIDebug.h"
#include "UI\BuildUI\BuildUI.h"
#include "UI\InGameUI\Vin_InGameUI.h"

};

class Extended_PreInit_EventHandlers {
    missionSettings = call compile preprocessFileLineNumbers "Init\initCBAMissionSettings.sqf";
};


// Garbage collector
// https://community.bistudio.com/wiki/Description.ext#Corpse_.26_wreck_management

// Sets the mode for corpse removal manager.
corpseManagerMode = 1; // Leave it at 1

// Corpse limit before which ( <= ) corpseRemovalMaxTime applies and after which ( > ) corpseRemovalMinTime applies.
corpseLimit = 30;

// Remove all bodies that have been dead longer than corpseRemovalMinTime when corpseLimit is reached.
corpseRemovalMinTime = 60; // seconds. Default: 10

// Maximum time a corpse can remain on the ground if total number of corpses is equal or under corpseLimit.
corpseRemovalMaxTime = 600; // seconds. Default: 3600

// Sets the mode for wreck removal manager.
wreckManagerMode = 1; // Leave it at 1

// Vehicle wreck limit before which ( <= ) wreckRemovalMaxTime applies and after which ( > ) wreckRemovalMinTime applies .
wreckLimit = 15;

// Remove all wrecks that have existed longer than wreckRemovalMinTime when wreckLimit is breached.
wreckRemovalMinTime = 1800; // seconds. Default: 10

// Maximum time a wreck can remain on the ground if total number of wrecks is equal or under wreckLimit.
wreckRemovalMaxTime = 7200; // seconds. Default: 36000 (10 hours)

// The minimum distance between corpse or wreck and nearest player before the corpse or wreck is allowed to be removed by the garbage collector.
minPlayerDistance = 1500; // meters. Default: 0

// Test adding stuff to standard displays
class Extended_DisplayLoad_EventHandlers {
    class RscDisplayLoading {
        Mission_customLoadingScreen = "_this call compile preprocessFileLineNumbers 'loadDisplay.sqf';";
    };
    /*
    class RscDisplayLoadCustom {
        Mission_customLoadingScreen = "diag_log format [' >>> DisplayLoadCustom: %1', _this];";
    };

    class RscDisplayLoadingBlack {
        Mission_customLoadingScreen = "diag_log format [' >>> DisplayLoadingBlack: %1', _this];";
    };

    class RscDisplayLoadMission {
        Mission_customLoadingScreen = "diag_log format [' >>> DisplayLoadMission: %1', _this];";
    };

    class RscDisplayMission {
        Mission_customLoadingScreen = "diag_log format [' >>> DisplayMission: %1', _this];";
    };

     class RscDisplayMultiplayerSetup {
        Mission_customLoadingScreen = "diag_log format [' >>> DisplayMission: %1', _this];";
    };
    */
};